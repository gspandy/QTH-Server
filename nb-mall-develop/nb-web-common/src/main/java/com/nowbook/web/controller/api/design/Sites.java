package com.nowbook.web.controller.api.design;import com.nowbook.common.model.Response;import com.nowbook.exception.JsonResponseException;import com.nowbook.site.model.Site;import com.nowbook.site.service.SiteService;import com.nowbook.user.base.BaseUser;import com.nowbook.user.base.UserUtil;import com.nowbook.web.misc.MessageSources;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.MediaType;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;/** * Created by IntelliJ IDEA. * User: AnsonChan * Date: 13-11-28 */@Controller@Slf4j@RequestMapping("/api/design/sites")public class Sites {    @Autowired    private SiteService siteService;    @Autowired    private MessageSources messageSources;    @RequestMapping(value = "/useAndRelease", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)    @ResponseBody    public String useAndRelease(@RequestParam(value = "templateId") Long templateId) {        BaseUser user = UserUtil.getCurrentUser();        Long userId = user.getId();        Response<Site> siteR = siteService.findShopByUserId(userId);        if (!siteR.isSuccess()) {            log.warn("site not found when release, userId={},error code:{}", userId,siteR.getError());            throw new JsonResponseException(500, messageSources.get(siteR.getError()));        }        Site site = siteR.getResult();        Response<Long> releaseR = siteService.useAndRelease(site.getId(), templateId);        if(!releaseR.isSuccess()){            log.error("failed to for user(id={}) to use and release template(id={}),error code:{}",                    userId,templateId,releaseR.getError());            throw new JsonResponseException(500,messageSources.get(releaseR.getError()));        }        return "ok";    }    @RequestMapping(value = "/reset", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)    @ResponseBody    public void reset(@RequestParam(value = "templateId") Long templateId) {        BaseUser user = UserUtil.getCurrentUser();        Long userId = user.getId();        Response<Site> siteR = siteService.findShopByUserId(userId);        if (!siteR.isSuccess()) {            log.warn("site not found when release, userId={},error code:{}", userId,siteR.getError());            throw new JsonResponseException(500, messageSources.get(siteR.getError()));        }        Site site = siteR.getResult();        Response<Boolean> resetR = siteService.resetTemplate(site.getId(), templateId);        if(!resetR.isSuccess()){            log.error("failed to for user(id={}) to reset template(id={}),error code:{}",                    userId,templateId,resetR.getError());            throw new JsonResponseException(500,messageSources.get(resetR.getError()));        }    }}