<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright (c) 2014 大连锦霖科技有限公司
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "mybatis-3-mapper.dtd">

<mapper namespace="BuyingTempOrder">
    <resultMap id="BuyingTempOrderMap" type="BuyingTempOrder">
        <id property="id" column="id"/>
        <result property="orderId" column="order_id"/>
        <result property="buyingActivityId" column="buying_activity_id"/>
        <result property="skuId" column="sku_id"/>
        <result property="buyerId" column="buyer_id"/>
        <result property="sellerId" column="seller_id"/>
        <result property="shopId" column="shop_id"/>
        <result property="buyingPrice" column="buying_price"/>
        <result property="skuQuantity" column="sku_quantity"/>
        <result property="skuAttributeJson" column="sku_attribute_json"/>
        <result property="itemId" column="item_id"/>
        <result property="itemImage" column="item_image"/>
        <result property="itemName" column="item_name"/>
        <result property="tradeInfoId" column="trade_info_id"/>
        <result property="status" column="status"/>
        <result property="orderCreatedAt" column="order_created_at"/>
        <result property="regionId" column="region_id"/>
        <result property="orderStartAt" column="order_start_at"/>
        <result property="orderEndAt" column="order_end_at"/>
        <result property="payLimit" column="pay_limit"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <sql id="column">
        order_id, buying_activity_id, sku_id,buyer_id,seller_id,shop_id, buying_price, sku_quantity, sku_attribute_json, item_id, item_image,
        item_name,trade_info_id,status,order_created_at,region_id,order_start_at,order_end_at,pay_limit,created_at, updated_at
    </sql>

    <insert id="create" parameterType="BuyingTempOrder" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO buying_temp_orders (<include refid="column"/>)
        VALUES (#{orderId}, #{buyingActivityId}, #{skuId},#{buyerId},#{sellerId},#{shopId}, #{buyingPrice}, #{skuQuantity}, #{skuAttributeJson}, #{itemId},
        #{itemImage}, #{itemName}, #{tradeInfoId}, #{status}, #{orderCreatedAt}, #{regionId}, #{orderStartAt}, #{orderEndAt}, #{payLimit},now(), now());
    </insert>

    <update id="update" parameterType="BuyingTempOrder">
        UPDATE buying_temp_orders
        <set>
            updated_at=now(),
            <if test="orderId != null">order_id = #{orderId},</if>
            <if test="buyingActivityId != null">buying_activity_id = #{buyingActivityId},</if>
            <if test="skuId != null">sku_id = #{skuId},</if>
            <if test="buyerId != null">buyer_id = #{buyerId},</if>
            <if test="sellerId != null">seller_id = #{sellerId},</if>
            <if test="shopId != null">shop_id = #{shopId},</if>
            <if test="buyingPrice != null">buying_price = #{buyingPrice},</if>
            <if test="skuQuantity != null">sku_quantity = #{skuQuantity},</if>
            <if test="skuAttributeJson != null">sku_attribute_json = #{skuAttributeJson},</if>
            <if test="itemId != null">item_id = #{itemId},</if>
            <if test="itemImage != null">item_image = #{itemImage},</if>
            <if test="itemName != null">item_name = #{itemName},</if>
            <if test="tradeInfoId != null">trade_info_id = #{tradeInfoId},</if>
            <if test="status != null">status = #{status},</if>
            <if test="orderCreatedAt != null">order_created_at = #{orderCreatedAt},</if>
        </set>
        WHERE id = #{id}
    </update>

    <select id="findById" parameterType="long" resultMap="BuyingTempOrderMap">
        SELECT id, <include refid="column"/> FROM buying_temp_orders WHERE id = #{id}
    </select>

    <delete id="delete" parameterType="long">
        DELETE from buying_temp_orders WHERE id = #{id}
    </delete>


    <sql id="condition">
        <where>
            <if test="itemName!=null">item_name like concat('%', #{itemName},'%')</if>
            <if test="startAt!=null"> AND <![CDATA[ created_at >= #{startAt} ]]> </if>
            <if test="endAt!=null"> AND <![CDATA[ created_at <= #{endAt} ]]> </if>
            <if test="id!=null"> AND id =#{id}</if>
            <if test="buyerId!=null"> AND buyer_id =#{buyerId}</if>
            <if test="shopId!=null"> AND shop_id =#{shopId}</if>
            <if test="status!=null"> AND status =#{status}</if>
            <if test="ids!=null">
                AND order_id IN <foreach collection="orderIds" open="(" separator="," close=")" item="orderId">
                #{orderId} </foreach>
            </if>
        </where>
    </sql>

    <select id="count" parameterType="map" resultType="long">
        select count(1)
        from buying_temp_orders
        <include refid="condition"/>
    </select>

    <select id="paging" parameterType="map" resultMap="BuyingTempOrderMap">
        select id,
        <include refid="column"/>
        from buying_temp_orders
        <include refid="condition"/>
        ORDER BY id DESC
        limit #{offset},#{limit}
    </select>

    <select id="findInOrderIds" resultMap="BuyingTempOrderMap">
        select id,
        <include refid="column"/>
        from buying_temp_orders
        where
        order_id IN <foreach collection="list" open="(" separator="," close=")" item="orderId">
        #{orderId} </foreach>
    </select>


    <select id="getSaleQuantity" parameterType="map" resultType="int">
        select sum(`sku_quantity`)
        from buying_temp_orders where item_id =#{itemId} and buying_activity_id = #{activityId} and status !=-1
    </select>

    <select id="getHasBuyQuantity" parameterType="map" resultType="int">
        select sum(`sku_quantity`)
        from buying_temp_orders where item_id =#{itemId} and buying_activity_id = #{activityId} and buyer_id =#{userId} and status !=-1
    </select>

    <select id="findByOrderId" parameterType="long" resultMap="BuyingTempOrderMap">
        SELECT id, <include refid="column"/> FROM buying_temp_orders WHERE order_id = #{orderId}
    </select>


    <update id="updateToOutDate">
        UPDATE buying_temp_orders
        <set>
            updated_at=now(),
            status = -2
        </set>
        WHERE status = 0 AND <![CDATA[ #{now} > order_end_at ]]>
    </update>

    <update id="updateOrderId">
        UPDATE buying_temp_orders
        <set>
            updated_at = now(),
            order_id = #{newId},
        </set>
        WHERE order_id = #{oldId}
    </update>
</mapper>